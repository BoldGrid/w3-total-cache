<?php
/**
 * File: Extension_AiCrawler_Mock_Api.php
 *
 * Provides mock responses for InMotion Hosting Central API requests when the
 * real API is unavailable. The class hooks into the WordPress HTTP API and
 * returns canned data for specific endpoints used by the AiCrawler extension.
 *
 * @package W3TC
 */

namespace W3TC;

/**
 * Class Extension_AiCrawler_Mock_Api
 */
class Extension_AiCrawler_Mock_Api {
	/**
	 * Register the request interceptor.
	 *
	 * @return void
	 */
	public function run() {
		if ( defined( 'IMH_CENTRAL_API_MOCK' ) && IMH_CENTRAL_API_MOCK ) {
			add_filter( 'pre_http_request', array( $this, 'intercept' ), 10, 3 );
		}
	}

	/**
	 * Intercepts requests to the Central API and returns mock responses.
	 *
	 * @param false|array|\WP_Error $pre  The preemptive return value. Default false.
	 * @param array                 $args HTTP request arguments.
	 * @param string                $url  The request URL.
	 *
	 * @return false|array|\WP_Error Mocked response or the original pre value.
	 */
	public function intercept( $pre, $args, $url ) {
		if ( false === strpos( $url, IMH_CENTRAL_API_URL ) ) {
			return $pre;
		}

		// Check that the X-Central-Token and X-Central-Client headers are present.
		if ( empty( $args['headers']['X-Central-Token'] ) ||
			empty( $args['headers']['X-Central-Client'] ) ) {
			return $this->missing_headers();
		}

		// Ensure that the X-Central-Client header is set to 'boldgrid',
		// and the X-Central-Token is not "invalid".
		if ( 'boldgrid' !== $args['headers']['X-Central-Client'] ||
			'invalid' === $args['headers']['X-Central-Token'] ) {
			return $this->invalid_token();
		}

		$path     = wp_parse_url( $url, PHP_URL_PATH );
		$endpoint = trim( str_replace( 'central-crawler/', '', $path ), '/' );
		$method   = str_replace( '/', '_', $endpoint );

		$body_data = array();

		if ( ! empty( $args['body'] ) ) {
			$decoded = json_decode( $args['body'], true );
			if ( is_array( $decoded ) ) {
				$body_data = $decoded;
			}
		}

		if ( method_exists( $this, $method ) ) {
			return $this->$method( $args, $body_data );
		}

		return $this->not_found();
	}

	/**
	 * Mock handler for the /report endpoint.
	 *
	 * Note that the $args and $body_data parameters are not used in this mock,
	 * but they are included for consistency with the other methods.
	 *
	 * @param array $args      HTTP request arguments.
	 * @param array $body_data Decoded body data.
	 *
	 * @return array Mocked HTTP response.
	 */
	private function report( $args, $body_data ) { // phpcs:ignore Generic.CodeAnalysis.UnusedFunctionParameter
		$data = array(
			'success'  => true,
			'url'      => home_url(),
			'report'   => array(
				home_url( '/robots.txt' )  => array(
					'present'    => true,
					'sufficient' => true,
					'evaluation' => __( 'The robots.txt file is present and well-formed.', 'w3-total-cache' ),
				),
				home_url( '/llms.txt' )    => array(
					'present'    => true,
					'sufficient' => false,
					'evaluation' => __( 'The contents of the llms.txt file are malformed, and cannot be correctly parsed.', 'w3-total-cache' ),
				),
				home_url( '/sitemap.xml' ) => array(
					'present'    => false,
					'sufficient' => false,
					'evaluation' => __( 'The file was not found', 'w3-total-cache' ),
				),
			),
			'metadata' => array(),
		);

		return array(
			'body'     => wp_json_encode( $data ),
			'response' => array(
				'code'    => 200,
				'message' => 'OK',
			),
		);
	}

	/**
	 * Mock handler for the /convert endpoint.
	 *
	 * @param array $args      HTTP request arguments.
	 * @param array $body_data Decoded body data.
	 *
	 * @return array Mocked HTTP response.
	 */
	private function convert( $args, $body_data ) {
		$url_to_convert = isset( $body_data['url'] ) ? $body_data['url'] : 'https://example.com';

		$post_title = 'Example Domain';

		// Get Post Title from URL.
		$post_id = url_to_postid( $url_to_convert );
		if ( $post_id ) {
			$post = get_post( $post_id );
			if ( $post && ! is_wp_error( $post ) ) {
				$post_title = $post->post_title;
			}
		}
		$markdown = "# $post_title\n\nThis is a mock sample of the markdown that would be generated by the AI Crawler API.\n\n";

		$data = array(
			'success'          => true,
			'url'              => $url_to_convert,
			'markdown_content' => $markdown,
			'content_length'   => strlen( $markdown ),
			'output_format'    => 'markdown',
			'metadata'         => (object) array(),
		);

		return array(
			'body'     => wp_json_encode( $data ),
			'response' => array(
				'code'    => 200,
				'message' => 'OK',
			),
		);
	}

	/**
	 * Generates a 404 not found response.
	 *
	 * @return array Mocked HTTP 404 response.
	 */
	private function not_found() {
		$error = array(
			'success' => false,
			'error'   => array(
				'code'    => 'mock_not_implemented',
				'message' => 'No mock available for this endpoint.',
			),
		);

		return array(
			'body'     => wp_json_encode( $error ),
			'response' => array(
				'code'    => 404,
				'message' => 'Not Found',
			),
		);
	}

	/**
	 * Return a 401 Unauthorized response for missing headers.
	 *
	 * @return array Mocked HTTP 401 response.
	 *
	 * @since x.x.x
	 */
	private function missing_headers() {
		$error = array(
			'success' => false,
			'error'   => array(
				'code'    => 'missing_headers',
				'message' => __( 'Missing required headers: X-Central-Token and X-Central-Client.', 'w3-total-cache' ),
			),
		);

		return array(
			'body'     => wp_json_encode( $error ),
			'response' => array(
				'code'    => 401,
				'message' => 'Unauthorized',
			),
		);
	}

	/**
	 * Return a 403 Forbidden response for invalid token or client.
	 *
	 * @return array Mocked HTTP 403 response.
	 *
	 * @since x.x.x
	 */
	private function invalid_token() {
		$error = array(
			'success' => false,
			'error'   => array(
				'code'    => 'invalid_token',
				'message' => __( 'Invalid X-Central-Token or X-Central-Client.', 'w3-total-cache' ),
			),
		);

		return array(
			'body'     => wp_json_encode( $error ),
			'response' => array(
				'code'    => 403,
				'message' => 'Forbidden',
			),
		);
	}
}
